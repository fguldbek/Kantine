@page "/user"

@inject HttpClient Http
@using Core.Models
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<h3>Your Upcoming Events</h3>

@if (events != null && events.Count > 0)
{
    <ul>
        @foreach (var eventItem in events)
        {
            <li>
                <h4>@eventItem.Name</h4>
                <p><strong>Location:</strong> @eventItem.Location</p>
                <p><strong>Food:</strong> @eventItem.Food</p>
                <p><strong>Participants:</strong> @eventItem.Participants</p>
                <p><strong>Requests:</strong> @eventItem.Requests</p>
                <p><strong>Start Date:</strong> @eventItem.StartDate.ToString("f")</p>
                <p><strong>Company:</strong> @eventItem.Company?.Name</p>

                <h5>Tasks:</h5>
                <ul>
                    @foreach (var task in eventItem.TaskList)
                    {
                        <li>
                            <strong>@task.Name</strong>
                            <p><strong>Description:</strong> @task.Description</p>
                            <p><strong>Start Date:</strong> @task.StartDate.ToString("f")</p>
                            <p><strong>End Date:</strong> @task.EndDate.ToString("f")</p>
                            <p><strong>Status:</strong> @(task.Status ? "Completed" : "Pending")</p>

                            @if (task.AssignmentList.Any(a => a.EmployeeId == UserId))
                            {
                                var assignedTask = task.AssignmentList.FirstOrDefault(a => a.EmployeeId == UserId);
                                <p><strong>You are assigned to this task:</strong></p>
                                <p><strong>Start Date:</strong> @assignedTask?.StartDate.ToString("f")</p>
                                <p><strong>End Date:</strong> @assignedTask?.EndDate.ToString("f")</p>
                                <p><strong>Status:</strong> @(assignedTask?.Status == true ? "Completed" : "Pending")</p>
                            }
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
}
else
{
    <p>No upcoming events found.</p>
}

@code {
    private string serverUrl = "http://localhost:5002";
    private Employee? employee;
    private List<Events>? events; // List to store events for the employee

    public int? UserId;

    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<Employee>("user");
        if (user != null)
        {
            UserId = user.Id;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            Console.WriteLine("User not found in localStorage");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();

        if (UserId != null)
        {
            events = await Http.GetFromJsonAsync<List<Events>>($"{serverUrl}/api/events/GetEmplyeeById/{UserId}");
        }
    }
}
