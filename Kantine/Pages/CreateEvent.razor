@inject HttpClient Http
@using Core.Models
@page "/CreateEvent"

<PageTitle>Create Event</PageTitle>

<h1>Create Event</h1>

<EditForm Model="@NewEvent" class="row p-3" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="NewEvent.Name" class="form-control" />
    </div>

    <div class="col-md-6 mb-3">
        <label for="Location">Location</label>
        <InputText id="Location" @bind-Value="NewEvent.Location" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="StartDate">Date</label>
        <InputDate id="StartDate" @bind-Value="NewEvent.StartDate" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Food">Food Choice</label>
        <InputText id="Food" @bind-Value="NewEvent.Food" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Requests">Special Food Requests</label>
        <InputText id="Requests" @bind-Value="NewEvent.Requests" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Company">Company</label>
        <select id="Company" @bind="NewEvent.Company" class="form-control">
            @foreach (var com in CompanyOptions)
            {
                <option value="@com">@com</option>
            }
        </select>
    </div>

    <div class="col-md-12 mb-3">
        <label for="Participants">Participants </label>
        <InputNumber id="Participants" @bind-Value="NewEvent.Participants" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-3">@SuccessMessage</div>
}

@code {
    private List<string> CompanyOptions = new List<string> { "Arla", "Jysk", "Ikea", "Justin Bieber", "Tivoli", "Snoop Dog", "Mike Tyson", "BR", "GameStop" };
    private Events NewEvent = new();
    private string SuccessMessage;

    private async Task HandleValidSubmit()
    {
        SuccessMessage = string.Empty; // Clear any previous messages
        await AddEventAsync();

        // If event creation was successful, reset the form and show a success message
        ResetForm();
        SuccessMessage = "Event added successfully!";
    }

    private void ResetForm()
    {
        NewEvent = new Events(); // Reset the form model
    }

    private string serverUrl = "http://localhost:5002";
    private async Task AddEventAsync()
    {
        try
        {
            Console.WriteLine($"Creating Event: {NewEvent.Name}, Location: {NewEvent.Location}, Date: {NewEvent.StartDate}");

            var response = await Http.PostAsJsonAsync($"{serverUrl}/api/events/add", NewEvent);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Event created successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to create event. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
