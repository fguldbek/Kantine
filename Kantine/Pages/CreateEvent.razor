@page "/CreateEvent"
@inject HttpClient Http
@using Core.Models

<PageTitle>Create Event</PageTitle>

<h1>Create Event</h1>

<EditForm Model="@NewEvent" class="row p-3" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="NewEvent.Name" class="form-control" />
    </div>

    <div class="col-md-6 mb-3">
        <label for="Location">Location</label>
        <InputText id="Location" @bind-Value="NewEvent.Location" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="StartDate">Date</label>
        <InputDate id="StartDate" @bind-Value="NewEvent.StartDate" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Food">Food Choice</label>
        <InputText id="Food" @bind-Value="NewEvent.Food" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Requests">Special Food Requests</label>
        <InputText id="Requests" @bind-Value="NewEvent.Requests" class="form-control" />
    </div>

    <div class="col-md-12 mb-3">
        <label for="Participants">Participants</label>
        <InputNumber id="Participants" @bind-Value="NewEvent.Participants" class="form-control" />
    </div>

    <!-- Dropdown for selecting company -->
    <div class="col-md-12 mb-3">
        <label for="Company">Company</label>
        <InputSelect id="Company" @bind-Value="SelectedCompany" class="form-control">
            <option value="">Select a company</option>
            @foreach (var company in Companies)
            {
                <option value="@company.Name">@company.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-12 mb-3">
        <label for="ImageUpload" class="btn btn-primary">
            Upload Image
            <InputFile id="ImageUpload" OnChange="HandleFileSelected" class="d-none" />
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-3">@SuccessMessage</div>
}

@code {
    private Events NewEvent = new();
    private string SuccessMessage;
    private List<Company> Companies = new();
    private string SelectedCompany;  // Variable to bind to the selected company name

    // Load the companies on component initialization
    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Company>>("http://localhost:5002/api/companies");
        Companies = response ?? new List<Company>();
    }

    private async Task HandleValidSubmit()
    {
        SuccessMessage = string.Empty; // Clear any previous messages
        await AddEventAsync();

        // If event creation was successful, reset the form and show a success message
        ResetForm();
        SuccessMessage = "Event added successfully!";
    }

    private void ResetForm()
    {
        NewEvent = new Events(); // Reset the form model
    }

    private string serverUrl = "http://localhost:5002";
    private async Task AddEventAsync()
    {
        try
        {
            // Find the selected company from the list using the selected name
            var selectedCompany = Companies.FirstOrDefault(c => c.Name == SelectedCompany);
            if (selectedCompany != null)
            {
                NewEvent.Company = selectedCompany;  // Set the full Company object on the Event
            }

            var response = await Http.PostAsJsonAsync($"{serverUrl}/api/events/add", NewEvent);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Event created successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to create event. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
      
        
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(buffer, 0, (int)file.Size);
            }
            NewEvent.ImageUrl = Convert.ToBase64String(buffer);
        }
    }
}
