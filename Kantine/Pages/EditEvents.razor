@page "/EditEvents/{id:int}"
@using Core.Models
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Edit Event</h3>

@if (currentEvent == null)
{
    <p>Loading...</p>
}
else
{
    if (isEditing)
    {
        <EditForm Model="currentEvent" OnValidSubmit="@HandleValidSubmit" style="display: flex; flex-direction: column; height: 450px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); background-color: #f9f9f9; padding: 20px;">
            <DataAnnotationsValidator/>
            <ValidationSummary style="margin-bottom: 20px; color: red;"/>

            <div style="flex-grow: 1; display: flex; flex-direction: column; gap: 15px;">
                <div>
                    <label style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Name:</label>
                    <InputText @bind-Value="currentEvent.Name" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"/>
                </div>
                <div>
                    <label style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Start Date:</label>
                    <InputDate @bind-Value="currentEvent.StartDate" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"/>
                </div>
                <div>
                    <label style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Location:</label>
                    <InputText @bind-Value="currentEvent.Location" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"/>
                </div>
                <div>
                    <label style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Food:</label>
                    <InputText @bind-Value="currentEvent.Food" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;"/>
                </div>
            </div>

            <button type="submit" style="margin-top: auto; padding: 10px 20px; background-color: blue; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Save
            </button>


        </EditForm>
    }
    else
        
        
    {
        <div>
            <div style="display: flex; flex-direction: row; gap: 15px; padding: 20px; background-color: #f9f9f9; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); border-radius: 10px;">
            <div style="display: flex; flex-direction: row;">
                <label class="flex-row" style="font-weight: bold; color: #333; margin-bottom: 5px; display: block; border-bottom-color: #1a1e21;">Name:</label>
                <p class="flex-row">@currentEvent.Name</p>
            </div>
            <div class="flex-column">
                <label class="flex-row" style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Start Date:</label>
                <p class="flex-row">@currentEvent.StartDate.ToShortDateString()</p>
            </div >
            <div class="flex-column">
                <label class="flex-row" style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Location:</label>
                <p class=" flex-row">@currentEvent.Location</p>
            </div>
            <div class="flex-column">
                <label class="flex-row" style="font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Food:</label>
                <p class="flex-row">@currentEvent.Food</p>
            </div>

        </div>
            
            
            
            
            <h2>Opgaver</h2>
            <div>
                @foreach (var task in currentEvent.TaskList)
                {
                    <div style="margin-bottom: 10px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                        <p style="margin: 0; font-weight: bold;">@task.Name</p>
                        <p style="margin: 0; color: #555;">@task.StartDate</p>
                        <button @onclick="@(() => SeeTask(task.Id))"
                                style="margin-top: 10px; padding: 10px 20px; background-color: blue; color: white; border: none; border-radius: 5px; cursor: pointer;">
                            Se opgave
                        </button>
                    </div>
                }
            </div>
            <button @onclick="() => isEditing = true" style="margin-top: 20px; padding: 10px 20px; background-color: blue; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Edit
            </button>
        </div>



        @if (showTaskModal)
        {
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); border-radius: 8px; z-index: 1000;">
                <h4>Add Task</h4>
                <EditForm Model="newTask">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div style="border: #1a1e21">
                        <label>Task Name:</label>
                        <InputText @bind-Value="newTask.Name" style="width: 100%;"/>
                    </div>
                    <div>
                        <label>Description:</label>
                        <InputText @bind-Value="newTask.Description" style="width: 100%;"/>
                    </div>
                    <div>
                        <label>StarDate:</label>
                        <InputDate @bind-Value="newTask.StartDate" style="width: 100%;"/>
                    </div>
                    <div>
                        <label>EndDate:</label>
                        <InputDate @bind-Value="newTask.EndDate" style="width: 100%;"/>
                    </div>

                    <div style="margin-top: 20px;">
                        <button @onclick="AddTaskToEvent"style="padding: 10px 20px; background: green; color: white; border: none; border-radius: 5px;">Add</button>
                        <button @onclick="CloseTaskModal" style="padding: 10px 20px; background: red; color: white; border: none; border-radius: 5px; margin-left: 10px;">Cancel</button>
                    </div>
                </EditForm>
            </div>
            <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;" @onclick="CloseTaskModal"></div>
        }

        <button @onclick="OpenTaskModal" style="">
            Add Task
        </button>



    }

    <button class="btn btn-primary">Test Bootstrap Button</button>

   

@code {

    private string serverUrl = "http://localhost:5002";
    

    [Parameter] public int id { get; set; }
    private Events? currentEvent;

    private EventTask? newTask = new();

    private bool isEditing = false;







    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentEvent();
    }


    //Henter det event som bruger har klikket p√• ved at binde til Order.id
    private async Task LoadCurrentEvent()
    {
        try
        {
            currentEvent = await Http.GetFromJsonAsync<Events>($"{serverUrl}/api/events/GetEventById/{id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching event details: {ex.Message}");
        }
    }
    
    private async Task AddTaskToEvent()
    {
        try
        {
            // Ensure that `newTask` and `currentEvent.Id` are correctly passed
            var response = await Http.PutAsJsonAsync($"{serverUrl}/api/events/AddTaskToEvent/{currentEvent.Id}", newTask);
        
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Task added successfully.");
                CloseTaskModal();
            }
            else
            {
                Console.WriteLine($"Failed to add task: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding task: {ex.Message}");
        }
    }


    
    private async Task HandleValidSubmit()
    {
        
        await Http.PutAsJsonAsync($"{serverUrl}/api/events/UpdateEvent", currentEvent);
            
        
    }
    private bool showTaskModal = false;

    private void OpenTaskModal()
    {
        showTaskModal = true;
        newTask = new EventTask(); // Reset task for a new entry
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
    }

    private async Task SeeTask(int TaskId)
    {
        
        NavManager.NavigateTo($"/EditTask/{currentEvent.Id}/{TaskId}");
        Console.WriteLine(TaskId);

    }

}


}
