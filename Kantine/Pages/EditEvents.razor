@page "/EditEvents/{id:int}"
@using Core.Models
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="container my-4">
    <h1>Edit Event Information</h1>

    @if (currentEvent == null)
    {
        <div class="text-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p>Loading event details...</p>
        </div>
    }
    else
    {
        @if (isEditing)
        {
            <EditForm Model="currentEvent" OnValidSubmit="@HandleValidSubmit" class="bg-light p-4 rounded shadow">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="currentEvent.Name" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="start-date" class="form-label">Start Date</label>
                    <InputDate id="start-date" @bind-Value="currentEvent.StartDate" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <InputText id="location" @bind-Value="currentEvent.Location" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="food" class="form-label">Food</label>
                    <InputText id="food" @bind-Value="currentEvent.Food" class="form-control" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary me-2" @onclick="AddTaskToEvent">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => isEditing = false">Cancel</button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="card p-3 shadow-sm">
                <h5 class="card-title">Event Details</h5>
                <ul class="list-unstyled">
                    <li><strong>Name:</strong> @currentEvent.Name</li>
                    <li><strong>Start Date:</strong> @currentEvent.StartDate.ToShortDateString()</li>
                    <li><strong>Location:</strong> @currentEvent.Location</li>
                    <li><strong>Food:</strong> @currentEvent.Food</li>
                    <li><strong>Participants</strong> @currentEvent.Participants</li>
                    <li><strong>Food Requests</strong> @currentEvent.Requests</li>
                </ul>
            </div>

            <div class="mt-4">
                <button class="btn btn-primary me-2" @onclick="() => isEditing = true">Edit Event</button>
                <button class="btn btn-success" @onclick="OpenTaskModal">Add Task</button>
            </div>

            <h2 class="mt-4">Tasks</h2>
            <div class="list-group">
                @foreach (var task in currentEvent.TaskList)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">@task.Name</h6>
                            <small class="text-muted">@task.StartDate.ToShortDateString()</small>
                        </div>
                        <div>
                            <button class="btn btn-primary btn-sm me-2" @onclick="@(() => SeeTask(task.Id))">Add Assignment</button>
                            
                            <!-- Tilføjet Edit Task-knap -->
                            <button class="btn btn-warning btn-sm me-2" @onclick="@(() => EditTask(task.Id))">Edit Task</button>
                            <!-- Slut på tilføjelse -->

                            <button class="btn btn-secondary btn-sm" @onclick="@(() => SeeAssignments(task.Id))">See Assignment</button>
                        </div>
                    </div>
                }
            </div>
        }

        @if (showTaskModal)
        {
            <div class="modal show d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="btn-close" @onclick="CloseTaskModal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="newTask" OnValidSubmit="SaveTask">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger mb-3" />

                                <div class="mb-3">
                                    <label for="task-name" class="form-label">Task Name</label>
                                    <InputText id="task-name" @bind-Value="newTask.Name" class="form-control" />
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <InputText id="description" @bind-Value="newTask.Description" class="form-control" />
                                </div>

                                <div class="mb-3">
                                    <label for="start-date" class="form-label">Start Date</label>
                                    <InputDate id="start-date" @bind-Value="newTask.StartDate" class="form-control" />
                                </div>

                                <div class="mb-3">
                                    <label for="end-date" class="form-label">End Date</label>
                                    <InputDate id="end-date" @bind-Value="newTask.EndDate" class="form-control" />
                                </div>
                            </EditForm>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-primary" type="submit" @onclick="AddTaskToEvent">Save</button>
                            <button class="btn btn-secondary" @onclick="CloseTaskModal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop show"></div>
        }
    }
</div>

@code {
    private string serverUrl = "http://localhost:5002";

    [Parameter] public int id { get; set; }
    private Events? currentEvent;
    private EventTask? newTask = new();
    private bool isEditing = false;
    private bool showTaskModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentEvent();
    }

    private async Task LoadCurrentEvent()
    {
        try
        {
            currentEvent = await Http.GetFromJsonAsync<Events>($"{serverUrl}/api/events/GetEventById/{id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching event details: {ex.Message}");
        }
    }

    private async Task AddTaskToEvent()
    {
        var response = await Http.PutAsJsonAsync($"{serverUrl}/api/events/AddTaskToEvent/{currentEvent.Id}", newTask);
        await LoadCurrentEvent();
        CloseTaskModal();
    }

    private async Task EditTask(int taskId)
    {
        var taskToEdit = currentEvent.TaskList.FirstOrDefault(t => t.Id == taskId);
        if (taskToEdit != null)
        {
            newTask = new EventTask
            {
                Id = taskToEdit.Id,
                Name = taskToEdit.Name,
                Description = taskToEdit.Description,
                StartDate = taskToEdit.StartDate,
                EndDate = taskToEdit.EndDate
            };
            OpenTaskModal();
        }
    }

    private async Task SaveTask()
    {
        Console.WriteLine($"SaveTask triggered for Task: {newTask.Name} with ID: {newTask.Id}");

        if (newTask.Id == 0)
        {
            Console.WriteLine("Adding new task...");
            await AddTaskToEvent();
        }
        else
        {
            Console.WriteLine("Updating existing task...");
            var taskIndex = currentEvent.TaskList.FindIndex(t => t.Id == newTask.Id);
            if (taskIndex != -1)
            {
                currentEvent.TaskList[taskIndex] = newTask;

                try
                {
                    var response = await Http.PutAsJsonAsync($"{serverUrl}/api/events/UpdateTask/{currentEvent.Id}", newTask);
                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Task updated successfully");
                    }
                    else
                    {
                        Console.WriteLine($"Error updating task: {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception while updating task: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Task not found in current event list.");
            }
        }

        CloseTaskModal();
        await LoadCurrentEvent(); // Reload updated event data
    }

    private void OpenTaskModal()
    {
        showTaskModal = true;
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
    }

    private async Task SeeTask(int TaskId)
    {
        NavManager.NavigateTo($"/EditTask/{currentEvent.Id}/{TaskId}");
    }

    private async Task SeeAssignments(int taskId)
    {
        NavManager.NavigateTo($"/Assignments/{currentEvent.Id}/{taskId}");
    }

    private async Task HandleValidSubmit()
    {
        await Http.PutAsJsonAsync($"{serverUrl}/api/events/UpdateEvent", currentEvent);
        await LoadCurrentEvent();
        isEditing = false;
    }
}