@page "/CreateEvent"
@inject HttpClient Http
@using Core.Models
@using Blazored.LocalStorage
@using KantineApp.Services
@inject ILocalStorageService localStorage
@inject ILoginService LoginService
@inject NavigationManager navManager
@inject ServerUrl ServerUrl;

@if (isLoggedIn && user?.Role == 1 || user?.Role == 2)
{
<PageTitle>Create Event</PageTitle>

<div class="container my-4">
    <div class="card shadow-sm p-4">
        <h1 class="card-title mb-4">Create Event</h1>

        <EditForm Model="@NewEvent" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <!-- Event Name -->
            <div class="mb-3">
                <label for="Name" class="form-label">Name</label>
                <InputText id="Name" @bind-Value="NewEvent.Name" class="form-control" placeholder="Enter event name" />
            </div>

            <!-- Location -->
            <div class="mb-3">
                <label for="Location" class="form-label">Location</label>
                <InputText id="Location" @bind-Value="NewEvent.Location" class="form-control" placeholder="Enter location" />
            </div>

            <!-- Start Date -->
            <div class="mb-3">
                <label for="StartDate" class="form-label">Date</label>
                <InputDate id="StartDate" @bind-Value="NewEvent.StartDate" class="form-control" />
            </div>

            <!-- Food -->
            <div class="mb-3">
                <label for="Food" class="form-label">Food Choice</label>
                <InputText id="Food" @bind-Value="NewEvent.Food" class="form-control" placeholder="Enter food choice" />
            </div>

            <!-- Special Food Requests -->
            <div class="mb-3">
                <label for="Requests" class="form-label">Special Food Requests</label>
                <InputText id="Requests" @bind-Value="NewEvent.Requests" class="form-control" placeholder="Enter special food requests" />
            </div>

            <!-- Participants -->
            <div class="mb-3">
                <label for="Participants" class="form-label">Participants</label>
                <InputNumber id="Participants" @bind-Value="NewEvent.Participants" class="form-control" placeholder="Enter number of participants" />
            </div>

            <!-- Company Dropdown -->
            <div class="mb-3">
                <label for="Company" class="form-label">Company</label>
                <InputSelect id="Company" @bind-Value="SelectedCompany" class="form-select">
                    <option value="">Select a company</option>
                    @foreach (var company in Companies)
                    {
                        <option value="@company.Name">@company.Name</option>
                    }
                </InputSelect>
            </div>

            <!-- Image Upload -->
            <div class="mb-3">
                <label for="ImageUpload" class="form-label">Upload Image</label>
                <InputFile id="ImageUpload" OnChange="HandleFileSelected" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary w-100">Create Event</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-4">@SuccessMessage</div>
        }
    </div>
</div>
}
else 
{
    <p>You don’t have access to this page.</p>
}

@code {
    private Events NewEvent = new();
    private string SuccessMessage;
    private List<Company> Companies = new();
    private string SelectedCompany; // Bound to the selected company name
    
    private bool isLoggedIn = false;
    
    public int? UserId;
    
    private Employee user;

    
    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<Employee>("user");
        if (user != null)
        {
            UserId = user.Id;
            isLoggedIn = true;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            isLoggedIn = false;
            Console.WriteLine("User not found in localStorage");
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Attempt to get the user from the LoginService
        user = await LoginService.GetUserLoggedIn();

        if (user == null) // User not logged in, redirect immediately
        {
            isLoggedIn = false;
            navManager.NavigateTo("LoginPage/CreateEvent");
            return; // Prevent further execution
        }

        // User is logged in
        isLoggedIn = true;

        // Fetch user details from localStorage
        await GetUserId();

        // Initialize Companies list
        var response = await Http.GetFromJsonAsync<List<Company>>($"{ServerUrl.serverUrl}/api/companies");
        Companies = response ?? new List<Company>();
    }


    private async Task HandleValidSubmit()
    {
        SuccessMessage = string.Empty; // Clear previous messages
        await AddEventAsync();

        ResetForm();
        SuccessMessage = "Event added successfully!";
    }

    private void ResetForm()
    {
        NewEvent = new Events(); // Reset form
    }

    private async Task AddEventAsync()
    {
        
            var selectedCompany = Companies.FirstOrDefault(c => c.Name == SelectedCompany);
            if (selectedCompany != null)
            {
                NewEvent.Company = selectedCompany; // Set the full Company object on the Event
            }

            var response = await Http.PostAsJsonAsync($"{ServerUrl.serverUrl}/api/events/add", NewEvent);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Failed to create event. Status: {response.StatusCode}");
            }
        
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(buffer, 0, (int)file.Size);
            }
            NewEvent.ImageUrl = Convert.ToBase64String(buffer);
        }
    }
}
