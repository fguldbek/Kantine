    @page "/CreateEvent"
    @inject HttpClient Http
    @using Core.Models
    @using Blazored.LocalStorage
    @using KantineApp.Services
    @inject ILocalStorageService localStorage
    @inject ILoginService LoginService
    @inject NavigationManager navManager
    @inject ServerUrl ServerUrl;

    <!--Tjekker om brugeren er logget ind, og om brugeren har den rigtige rolle.-->
    @if (isLoggedIn && user?.Role == 1 || user?.Role == 2) 
    {
        <PageTitle>Create Event</PageTitle>

        <div class="container my-4">
            <div class="card shadow-sm p-4">
                <h1 class="card-title mb-4">Create Event</h1>

                <!-- Formular til oprettelse af en ny begivenhed -->
                <EditForm Model="@NewEvent" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <!-- Felt til indtastning af event navn, hvor det bliver binded til NewEvent.Name -->
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <InputText id="Name" @bind-Value="NewEvent.Name" class="form-control" placeholder="Enter event name" />
                    </div>

                    <!-- Felt til indtastning af Lokation, hvor det bliver binded til NewEvent.Location -->
                    <div class="mb-3">
                        <label for="Location" class="form-label">Location</label>
                        <InputText id="Location" @bind-Value="NewEvent.Location" class="form-control" placeholder="Enter location" />
                    </div>

                    <!-- Felt til valg af Dato, hvor det bliver binded til NewEvent.StartDate -->
                    <div class="mb-3">
                        <label for="StartDate" class="form-label">Date</label>
                        <InputDate id="StartDate" @bind-Value="NewEvent.StartDate" class="form-control" />
                    </div>

                    <!-- Felt til valg af food choice, hvor det bliver binded til NewEvent.Food -->
                    <div class="mb-3">
                        <label for="Food" class="form-label">Food Choice</label>
                        <InputText id="Food" @bind-Value="NewEvent.Food" class="form-control" placeholder="Enter food choice" />
                    </div>

                    <!-- Felt til valg af Special Food Requests, hvor det bliver binded til NewEvent.Requests -->
                    <div class="mb-3">
                        <label for="Requests" class="form-label">Special Food Requests</label>
                        <InputText id="Requests" @bind-Value="NewEvent.Requests" class="form-control" placeholder="Enter special food requests" />
                    </div>

                    <!-- Felt til valg af Participants, hvor det bliver binded til NewEvent.Participants -->
                    <div class="mb-3">
                        <label for="Participants" class="form-label">Participants</label>
                        <InputNumber id="Participants" @bind-Value="NewEvent.Participants" class="form-control" placeholder="Enter number of participants" />
                    </div>

                    <!-- Dropdown-menu for valg af virksomhed -->
                    <div class="mb-3">
                        <label for="Company" class="form-label">Company</label>
                        <InputSelect id="Company" @bind-Value="SelectedCompany" class="form-select">
                            <option value="">Select a company</option>
                            @foreach (var company in Companies)
                            {
                                <option value="@company.Name">@company.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Billed-upload -->
                    <div class="mb-3">
                        <label for="ImageUpload" class="form-label">Upload Image</label>
                        <InputFile id="ImageUpload" OnChange="HandleFileSelected" />
                    </div>

                    <!-- Opret-knap -->
                    <button type="submit" class="btn btn-primary w-100">Create Event</button>
                </EditForm>

                <!-- Succesbesked -->
                @if (!string.IsNullOrEmpty(FeedbackMessage))
                {
                <div class="alert @(FeedbackMessage.Contains("success") ? "alert-success" : "alert-danger") mt-4">
                    @FeedbackMessage
                </div>
                }
            </div>
        </div>
    }
    else 
    {
        <!-- Hvis brugeren ikke er logget ind eller har den rigtige rolle. -->
        <p>You don’t have access to this page.</p>
    }

    @code {
        private Events NewEvent = new(); 
        private string FeedbackMessage;  // Besked til succes eller fejl
        private List<Company> Companies = new(); // Liste over virksomheder
        private string SelectedCompany; // Valgt virksomhedsnavn
        
        private bool isLoggedIn = false;
        
        public int? UserId; // 
        private Employee user; // Brugerens data

        //Henter useren localstorage infomation og gemmer det i user.
        public async Task GetUserId()
        {
            var user = await localStorage.GetItemAsync<Employee>("user");
            if (user != null)
            {
                UserId = user.Id;
                isLoggedIn = true; // Marker som logget ind
            }
            else
            {
                UserId = null;
                isLoggedIn = false; // Marker som ikke logget ind
            }
        }

        protected override async Task OnInitializedAsync()
        {
            await GetUserId(); // Hent detaljer om brugeren fra localStorage

            user = await LoginService.GetUserLoggedIn(); // Tjek, om brugeren er logget ind

            if (user == null) // Hvis ikke logget ind, omdiriger
            {
                isLoggedIn = false;
                navManager.NavigateTo("LoginPage/CreateEvent"); // Redirect til login-siden
            }

            // Hvis brugeren er logget ind, ændres userens status til loggedIn
            isLoggedIn = true;

            // Hent liste over virksomheder fra API
            var response = await Http.GetFromJsonAsync<List<Company>>($"{ServerUrl.serverUrl}/api/companies");
            Companies = response ?? new List<Company>();
        }

        private async Task HandleValidSubmit()
        {
            FeedbackMessage = string.Empty; // Nulstil tidligere beskeder
    
            // Tjek for obligatoriske felter
            if (string.IsNullOrEmpty(NewEvent.Name) || string.IsNullOrEmpty(NewEvent.Location) || 
                NewEvent.StartDate == null || string.IsNullOrEmpty(NewEvent.Food) || 
                NewEvent.Participants == 0)
            {
                FeedbackMessage = "Please fill in all required fields.";
                return; // Stop med at sende data, hvis der mangler noget
            }
            
            // Tjek for om et company er valgt.
            if (string.IsNullOrEmpty(SelectedCompany))
            {
                FeedbackMessage = "Please select a Company";
                return; // Stop hvis der ikke er uploadet et billede
            }
            
            // Tjek om et billede er uploadet.
            if (string.IsNullOrEmpty(NewEvent.ImageUrl))
            {
                FeedbackMessage = "Please upload an image.";
                return; // Stop hvis der ikke er uploadet et billede
            }

            await AddEventAsync(); // Tilføj begivenhed
            ResetForm(); // Nulstil formularen
            FeedbackMessage = "Event added successfully!"; // Success besked
        }


        // Nulstil formularen
        private void ResetForm()
        {
            NewEvent = new Events();
        }

        // Tilføjer en ny begivenhed via Post API
        private async Task AddEventAsync()
        {
            // selectedCompany er det company der er valgt, ved dropdown menuen.
            var selectedCompany = Companies.FirstOrDefault(c => c.Name == SelectedCompany);
            if (selectedCompany != null)
            {
                NewEvent.Company = selectedCompany; // Tilknyt valgt virksomhed til begivenhed
            }
            
            // Kører en post api, hvor NewEvent bliver taget med som objekt med dataen omkring det nye Event.
            var response = await Http.PostAsJsonAsync($"{ServerUrl.serverUrl}/api/events/add", NewEvent);
            if (!response.IsSuccessStatusCode)
            {
                FeedbackMessage = "Error while adding the event.";
            }
        }

        // Håndter billed-upload
        private async Task HandleFileSelected(InputFileChangeEventArgs e)
        {
            var file = e.File;
            if (file != null)
            {
                var buffer = new byte[file.Size];
                using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
                {
                    await stream.ReadAsync(buffer, 0, (int)file.Size);
                }
                NewEvent.ImageUrl = Convert.ToBase64String(buffer); // Konverter billeddata til Base64
            }
        }
    }
