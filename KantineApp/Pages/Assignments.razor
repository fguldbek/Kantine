@page "/Assignments/{eventId:int}/{taskId:int}"
@using Core.Models
@inject HttpClient Http
@inject NavigationManager NavManager
@using Blazored.LocalStorage
@using KantineApp.Services
@inject ILocalStorageService localStorage
@inject ILoginService LoginService
@inject NavigationManager navManager
@inject ServerUrl ServerUrl


@if (isLoggedIn)
{
<h1>Assignments</h1>

@if (taskAssignments == null || employeeList == null)
{
    <p>Loading assignments...</p>
}
else if (taskAssignments.Count == 0)
{
    <p>No assignments available for this task.</p>
}
else
{
    <div>
        <ul style="list-style-type: none; padding: 0;">
            @foreach (var assignment in taskAssignments)
            {
                var assignedEmployee = employeeList.FirstOrDefault(e => e.Id == assignment.EmployeeId);
                <li style="margin-bottom: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 8px;">
                    <p><strong>Name:</strong> @assignment.Name</p>
                    <p><strong>Note:</strong> @assignment.Note</p>
                    <p><strong>Assigned To:</strong> @(assignedEmployee != null ? assignedEmployee.Name : "Unassigned")</p>
                </li>
            }
        </ul>
    </div>
}
}
else 
{
    <p>You must be logged in to view this site.</p>
}

@code {
    [Parameter] public int eventId { get; set; }
    [Parameter] public int taskId { get; set; }

    private List<Assignment>? taskAssignments;
    private EventTask? task;
    private List<Employee>? employeeList;
    
    private bool isLoggedIn = false;
    
    public int? UserId;
    
    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<Employee>("user");
        if (user != null)
        {
            UserId = user.Id;
            isLoggedIn = true;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            isLoggedIn = false;
            Console.WriteLine("User not found in localStorage");
        }
    }
    

    protected override async Task OnInitializedAsync()
    {
        var user = await LoginService.GetUserLoggedIn();
        if (user == null)
        {
            navManager.NavigateTo("LoginPage");
        }

        await GetUserId();
        await LoadEmployees();
        await LoadAssignments();
    }

    private async Task LoadEmployees()
    {
        try
        {
            // Hent listen over medarbejdere
            employeeList = await Http.GetFromJsonAsync<List<Employee>>($"{ServerUrl.serverUrl}/api/employee/GetAllEmployees");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private async Task LoadAssignments()
    {
        try
        {
            // Fetch the event details
            var eventResponse = await Http.GetFromJsonAsync<Events>($"{ServerUrl.serverUrl}/api/events/GetEventById/{eventId}");
            task = eventResponse?.TaskList.FirstOrDefault(t => t.Id == taskId);

            if (task != null)
            {
                // Fetch the task's assignments
                taskAssignments = task.AssignmentList;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching assignments: {ex.Message}");
        }
    }
}
