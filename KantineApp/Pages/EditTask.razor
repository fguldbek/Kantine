@page "/EditTask/{eventId:int}/{TaskId:int}"
@using Core.Models
@inject HttpClient Http
@using Blazored.LocalStorage
@using KantineApp.Services
@inject ILocalStorageService localStorage
@inject ILoginService LoginService
@inject NavigationManager navManager
@inject ServerUrl ServerUrl;

@if (isLoggedIn)
{
    <div class="container my-4">
        <div class="card p-4 shadow-sm">
            <h3 class="card-title mb-3">Task Details</h3>
            <ul class="list-unstyled">
                <li><strong>Name:</strong> @currentTask.Name</li>
                <li><strong>Description:</strong> @currentTask.Description</li>
                <li><strong>Start Date:</strong> @currentTask.StartDate.ToShortDateString()</li>
                <li><strong>End Date:</strong> @currentTask.EndDate.ToShortDateString()</li>
            </ul>

            <button class="btn btn-primary mt-3" @onclick="OpenTaskModal">Add Employee</button>
        </div>

        @if (showTaskModal)
        {
            <div class="modal show d-block" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add Assignment</h5>
                            <button type="button" class="btn-close" @onclick="CloseTaskModal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="newAssignment" OnValidSubmit="AddAssignmentToTask">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger mb-3" />

                                <div class="mb-3">
                                    <label for="employee" class="form-label">Employee</label>
                                    <InputSelect id="employee" @bind-Value="newAssignment.EmployeeId" class="form-control">
                                        <option value="">Choose an employee</option>
                                        @foreach (var employee in employeeList)
                                        {
                                            <option value="@employee.Id">@employee.Name</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="mb-3">
                                    <label for="assignment-name" class="form-label">Name of Assignment</label>
                                    <InputText id="assignment-name" @bind-Value="newAssignment.Name" class="form-control" placeholder="Name of Assignment" />
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Note</label>
                                    <InputText id="description" @bind-Value="newAssignment.Note" class="form-control" placeholder="Note for Employee" />
                                </div>
                            </EditForm>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseTaskModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" @onclick="AddAssignmentToTask">Add</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop show"></div>
        }
    </div>
}
    else 
 {
    <p>You must be logged in to view this site.</p>
 }

@code {
    [Parameter] public int eventId { get; set; }
    [Parameter] public int TaskId { get; set; }    
    private EventTask? currentTask = new();
    private List<Employee> employeeList = new();
    private Assignment newAssignment = new();

    private bool showTaskModal = false;
    
    private bool isLoggedIn = false;
    
    public int? UserId;
    
    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<Employee>("user");
        if (user != null)
        {
            UserId = user.Id;
            isLoggedIn = true;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            isLoggedIn = false;
            Console.WriteLine("User not found in localStorage");
        }
    }
    


    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        var user = await LoginService.GetUserLoggedIn();
        if (user == null)
        {
            navManager.NavigateTo("LoginPage");
        }
        
        await LoadCurrentEvent();
        await LoadAllEmployees();
    }

    private async Task LoadCurrentEvent()
    {
        currentTask = await Http.GetFromJsonAsync<EventTask>($"{ServerUrl.serverUrl}/api/events/GetEventTaskById/{eventId}/{TaskId}");
    }

    private async Task AddAssignmentToTask()
    {
        
            var response = await Http.PutAsJsonAsync(
                $"{ServerUrl.serverUrl}/api/events/AddAssignmentToTask/{eventId}/{TaskId}", 
                newAssignment
            );
            if (response.IsSuccessStatusCode)
            {
                showTaskModal = false;
                newAssignment = new Assignment(); // Nulstil formularen
            }
            else
            {
                Console.WriteLine("Error: Kunne ikke tilf√∏je assignment.");
            }
    }
    
    private async Task LoadAllEmployees()
    {
        var response = await Http.GetFromJsonAsync<List<Employee>>($"{ServerUrl.serverUrl}/api/employee/GetAllEmployees");
        employeeList = response ?? new List<Employee>();
    }

    private void OpenTaskModal()
    {
        showTaskModal = true;
        newAssignment = new Assignment(); // Nulstil assignment for ny indtastning
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
    }
}
