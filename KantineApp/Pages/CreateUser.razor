@page "/CreateUser"
@using Core.Models
@using KantineApp.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ServerUrl ServerUrl;



<div class="container-fluid vh-100 d-flex justify-content-center align-items-center">
    <div class="card shadow-lg border-0 w-100" style="max-width: 600px;">
        <div class="card-header text-white bg-primary text-center">
            <h2>Create Your Account</h2>
        </div>
        <div class="card-body p-5">
            <h5 class="card-title text-center mb-4">Fill in the details below</h5>

            <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <!-- Name Input -->
                <div class="mb-4">
                    <label for="Name" class="form-label">Name</label>
                    <InputText id="Name" @bind-Value="Employee.Name" class="form-control form-control-lg rounded-pill" placeholder="Enter your name" />
                </div>

                <!-- Password Input -->
                <div class="mb-4">
                    <label for="Password" class="form-label">Password</label>
                    <InputText id="Password" @bind-Value="Employee.Password" class="form-control form-control-lg rounded-pill" type="password" placeholder="Enter a strong password" />
                </div>

                <!-- Number Input -->
                <div class="mb-4">
                    <label for="Number" class="form-label">Phone Number</label>
                    <InputText id="Number" @bind-Value="Employee.Number" class="form-control form-control-lg rounded-pill" placeholder="Enter your phone number" />
                </div>

                <!-- Email Input -->
                <div class="mb-4">
                    <label for="Email" class="form-label">Email Address</label>
                    <InputText id="Email" @bind-Value="Employee.Email" class="form-control form-control-lg rounded-pill" placeholder="Enter your email address" />
                </div>

                <!-- Skills Dropdown -->
                <div class="mb-4">
                    <label for="Skills" class="form-label">Select a Skill</label>
                    <InputSelect id="Skills" @bind-Value="Employee.Skills" class="form-select form-select-lg rounded-pill">
                        <option value="" disabled>Select a skill</option>
                        @foreach (var skill in Skills)
                        {
                            <option value="@skill">@skill</option>
                        }
                    </InputSelect>
                </div>

                <!-- Submit Button -->
                <button type="submit" class="btn btn-success btn-lg rounded-pill w-100 shadow-sm">
                    <i class="bi bi-check-circle-fill me-2"></i> Create Account
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Predefined skill list
    private List<string> Skills = new List<string> { "Dart", "Airball", "Sudoku", "Bingo" };

    // Employee model to bind form data
    private Employee Employee = new();
    

    // Handle form submission
    public async Task HandleValidSubmit()
    {
        await AddEmployeeAsync();
        ResetForm();
    }

    // Add employee via API
    private async Task AddEmployeeAsync()
    {
            var response = await Http.PostAsJsonAsync($"{ServerUrl.serverUrl}/api/employee/add", Employee);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Employee added successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to add employee. Status: {response.StatusCode}");
            }
    }

    // Reset the form
    private void ResetForm()
    {
        Employee = new();
    }
}
