@page "/user"

@inject HttpClient Http
@using Core.Models
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<h3 style="margin-bottom: 1.5rem; font-weight: bold;">Your Upcoming Events</h3>

@if (events != null && events.Count > 0)
{
<ul style="list-style-type: none; padding: 0;">
    @foreach (var eventItem in events)
    {
    <li style="margin-bottom: 1.5rem; background: #fff; border: 1px solid #ddd; border-radius: 0.25rem; padding: 1.5rem;">
        <h4 style="font-weight: bold; margin-bottom: 1rem;">@eventItem.Name</h4>
        <p style="margin: 0.25rem 0;"><strong>Location:</strong> @eventItem.Location</p>
        <p style="margin: 0.25rem 0;"><strong>Food:</strong> @eventItem.Food</p>
        <p style="margin: 0.25rem 0;"><strong>Participants:</strong> @eventItem.Participants</p>
        <p style="margin: 0.25rem 0;"><strong>Requests:</strong> @eventItem.Requests</p>
        <p style="margin: 0.25rem 0;"><strong>Start Date:</strong> @eventItem.StartDate.ToString("f")</p>
        <p style="margin: 0.25rem 0;"><strong>Company:</strong> @eventItem.Company?.Name</p>

        <h5 style="margin-top: 1rem; font-weight: bold;">Tasks:</h5>
        <ul style="list-style-type: none; padding: 0;">
            @foreach (var task in eventItem.TaskList)
            {
            <li style="margin-bottom: 1rem; border: 1px solid #e9ecef; border-radius: 0.25rem; padding: 1rem; background-color: #f8f9fa;">
                <strong style="display: block; font-size: 1.1rem; margin-bottom: 0.5rem;">@task.Name</strong>
                <p style="margin: 0.25rem 0;"><strong>Description:</strong> @task.Description</p>
                <p style="margin: 0.25rem 0;"><strong>Start Date:</strong> @task.StartDate.ToString("f")</p>
                <p style="margin: 0.25rem 0;"><strong>End Date:</strong> @task.EndDate.ToString("f")</p>
                <p style="margin: 0.25rem 0;"><strong>Status:</strong> @(task.Status ? "Completed" : "Pending")</p>

                @if (task.AssignmentList.Any(a => a.EmployeeId == UserId))
                {
                var assignedTask = task.AssignmentList.FirstOrDefault(a => a.EmployeeId == UserId);
                <p style="margin-top: 1rem; font-weight: bold;">You are assigned to this task:</p>
                <p style="margin: 0.25rem 0;"><strong>Status:</strong> @(assignedTask?.Name )</p>

                <p style="margin: 0.25rem 0;"><strong>Status:</strong> @(assignedTask?.Status )</p>
                <button class="btn btn-outline-primary" @onclick="OpenTaskModal">Add Task</button>

                }
            </li>
            }
        </ul>
    </li>
    }
</ul>
}
else
{
<p style="color: #6c757d;">No upcoming events found.</p>
}


@if (showTaskModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" @onclick="CloseTaskModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newAssignment" OnValidSubmit="FinishAssignment">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label for="end-date" class="form-label">Status</label>
                            <InputCheckbox id="end-date" @bind-Value="newAssignment.Status" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="EmployeeCapacity" class="form-label">Hours Used</label>
                            <InputNumber id="EmployeeCapacity" @bind-Value="newAssignment.HoursUsed" class="form-control" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" type="submit" >Save</button>

                    <button class="btn btn-secondary" @onclick="CloseTaskModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}










@code {
    private string serverUrl = "http://localhost:5002";
    private Employee? employee;
    private List<Events>? events; // List to store events for the employee
    private bool showTaskModal = false;
    private Assignment newAssignment = new Assignment
    {
        Status = false,
        HoursUsed = 0
    };

    public int? UserId;

    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<Employee>("user");
        UserId = user.Id;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();

        if (UserId != null)
        {
            events = await Http.GetFromJsonAsync<List<Events>>($"{serverUrl}/api/events/GetEmployeeAssignmentsById/{UserId}");
        }
    }


    private void FinishAssignment()
    {
        
    }
    private void OpenTaskModal()
    {
        showTaskModal = true;
    }

    private void CloseTaskModal()
    {
        showTaskModal = false;
    }
    
}
