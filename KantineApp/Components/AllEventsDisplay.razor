@inject HttpClient Http;
@using Core.Models
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@using Blazored.LocalStorage
@using KantineApp.Services
@inject ILocalStorageService localStorage
@inject ILoginService LoginService
@inject NavigationManager navManager

<h3>Event Overview</h3>

<div class="row" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">
    @if (events != null)
    {
    foreach (var eve in events)
    {
    <div class="card" style="display: flex; flex-direction: column; height: auto; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        @if (!string.IsNullOrEmpty(eve.ImageUrl))
        {
        <img src="data:image/jpeg;base64,@eve.ImageUrl" alt="Event image"
             style="width: 100%; height: 200px; object-fit: cover; object-position: center; border-top-left-radius: 10px; border-top-right-radius: 10px;" />
        }
        <div class="card-body" style="flex-grow: 1; background-color: #f9f9f9; border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; padding: 15px;">
            <h5 class="card-title" style="font-size: 1.2rem; font-weight: bold; color: #333; margin-bottom: 10px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@eve.Name</h5>
            <p class="card-text" style="font-size: 1rem; color: #555; line-height: 1.5; margin-bottom: 10px;">
                <strong class="border-bottom border-2 border-dark">Food:</strong> @eve.Food<br />
                <strong>Location:</strong> @eve.Location<br />
                <strong>Participants:</strong> @eve.Participants<br />
                <strong>Special Requests:</strong> @eve.Requests<br />
                <strong>Start Date:</strong> @eve.StartDate<br />
                <strong>Company:</strong> @eve.Company?.Name
            </p>
            <button
                @onclick="() => EditEvent(eve.Id)"
                class="btn btn-outline-primary w-100 mb-2">
                See Event
            </button>
            @if (isLoggedIn && (user?.Role == 1 || user?.Role == 2))
            {
            <button
                @onclick="() => ConfirmDeleteEvent(eve.Id)"
                class="btn btn-outline-danger w-100 mt-2">
                Delete Event
            </button>
            }
        </div>
    </div>
    }
    }
    else
    {
    <p>Loading events...</p>
    }
</div>

<!-- Modal Popup for Deletion Confirmation -->
@if (isModalVisible)
{
<div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
    <div style="background-color: white; padding: 20px; border-radius: 10px; width: 300px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
        <h5 style="margin-top: 0;">Confirm Deletion</h5>
        <p>Are you sure you want to delete this event?</p>
        <div style="display: flex; justify-content: space-between;">
            <button @onclick="CancelDelete" style="border-radius: 5px; padding: 5px 15px; background-color: #6c757d; color: white; border: none;">Cancel</button>
            <button @onclick="ConfirmDelete" style="border-radius: 5px; padding: 5px 15px; background-color: #007bff; color: white; border: none;">Confirm</button>
        </div>
    </div>
</div>
}

@code {
private Events[]? events;
private string serverUrl = "http://localhost:5002";
private bool isLoggedIn = false;
private bool isModalVisible = false;
private int eventIdToDelete;

public int? UserId;
private Employee user;

public async Task GetUserId()
{
var user = await localStorage.GetItemAsync<Employee>("user");
if (user != null)
{
UserId = user.Id;
isLoggedIn = true;
}
else
{
UserId = null;
isLoggedIn = false;
}
}

protected override async Task OnInitializedAsync()
{
user = await LoginService.GetUserLoggedIn();

if (user == null)
{
isLoggedIn = false;
navManager.NavigateTo("LoginPage");
return;
}

isLoggedIn = true;
await GetUserId();
events = await Http.GetFromJsonAsync<Events[]>($"{serverUrl}/api/events/GetAllEvents");
}

private async Task EditEvent(int orderId)
{
NavManager.NavigateTo($"/EditEvents/{orderId}");
}

private async Task DeleteEvent(int eventId)
{
var response = await Http.DeleteAsync($"{serverUrl}/api/events/DeleteEvent/{eventId}");
events = events?.Where(e => e.Id != eventId).ToArray();
StateHasChanged();
}

private void ConfirmDeleteEvent(int eventId)
{
eventIdToDelete = eventId;
isModalVisible = true;
}

private void CancelDelete()
{
isModalVisible = false;
}

private async Task ConfirmDelete()
{
await DeleteEvent(eventIdToDelete);
isModalVisible = false;
}
}
